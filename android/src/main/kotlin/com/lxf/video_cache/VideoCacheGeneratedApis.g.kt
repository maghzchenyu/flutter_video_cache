// Autogenerated from Pigeon (v17.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon


import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is LXFVideoCacheFlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class LXFVideoCacheFlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface LXFVideoCacheHostApi {
  /** 转换为缓存代理URL */
  fun convertToCacheProxyUrl(url: String): String

  /** 获取转码地址 */
  fun getTranscodeUrl(openurl: String, headers: Map<String, String>): String

  companion object {
    /** The codec used by LXFVideoCacheHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
    /** Sets up an instance of `LXFVideoCacheHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: LXFVideoCacheHostApi?) {
      run {

        val transChannel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.video_cache.LXFVideoCacheHostApi.getTranscodeUrl", codec)
        if (api!= null) {
          transChannel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val openurlArg = args[0] as String
            val headersArg = args[1] as Map<String, String>
            var wrapped: List<Any?>

            Thread(Runnable {
              try {
                wrapped = listOf<Any?>(api.getTranscodeUrl(openurlArg, headersArg))
              } catch (exception: Throwable) {
                wrapped = wrapError(exception)
              }
              reply.reply(wrapped)
            }).start()
          }
        }else {
          transChannel.setMessageHandler(null)
        }

        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.video_cache.LXFVideoCacheHostApi.convertToCacheProxyUrl", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val urlArg = args[0] as String
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.convertToCacheProxyUrl(urlArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
